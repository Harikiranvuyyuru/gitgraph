#!/usr/bin/env python

from cassandra.cluster import Cluster
from flask import Flask, jsonify, render_template, request
from flask_restful import Resource, Api
import json
from cassandra.query import SimpleStatement

cluster = Cluster(['52.8.127.252'])
session = cluster.connect('watch_events')

app = Flask(__name__)
# api = Api(app)

# class testgraphapi(Resource):
#   def post(self):
#     def testgraph_post():
#   username = request.form["username"]
#   cql = "SELECT f from testuserfollow WHERE username=%s"
#   stmt = session.execute(cql, parameters=[username])
#   following_list = stmt[0].f
#   print following_list
#   repojson = []
#   for all in following_list:
#     cql = "SELECT repo from testuserrepo WHERE username=%s"
#     reporow = session.execute(cql, parameters=[all])
#     repojson.append({"username": all, "repo": reporow[0].repo})
#   # print repojson, type(repojson)
#   # print "\n", repojson[0]["repo"]
#   jsonresponse = {"username": username, "following_details": repojson}
#   # json_results = map(lambda a: {k: json.loads(a.record).get(k, None)}, repojson)
#   return render_template("testgraphresult.html", response = jsonresponse)

# api.add_resource(testgraphapi, '/api/testgraphtree')

@app.route("/")
@app.route("/index")
def hello():
  return render_template("index.html")

@app.route("/userid")
def userid():
  return render_template("userid.html")

@app.route("/watchcount")
def watchcount():
  return render_template("watchcount.html")

@app.route("/watchcount", methods=['POST'])
def watchcount_post():
  reponame = request.form["reponame"]
  cql = "SELECT watchcount FROM watch WHERE reponame=%s"
  stmt = session.execute(cql, parameters=[reponame])
  jsonresponse = {"watchcount": stmt[0].watchcount}
  return render_template("wcresult.html", wc = jsonresponse)

@app.route("/userid", methods=['POST'])
def userid_post():
  user_id = request.form["userid"]
  cql = "SELECT userid FROM getuserid WHERE username=%s"
  stmt = session.execute(cql, parameters=[user_id])
  jsonresponse = {"userid": stmt[0].userid}
  return render_template("useridresult.html", user_id = jsonresponse)
  
@app.route("/testd3")
def testd3():
  return render_template("testd3.html")

@app.route("/testgraph")
def testgraph():
  return render_template("testgraph.html")

@app.route("/testgraph", methods=['POST'])
def testgraph_post():
  username = request.form["username"]
  cql = "SELECT f from testuserfollow WHERE username=%s"
  stmt = session.execute(cql, parameters=[username])
  following_list = stmt[0].f
  print following_list
  repojson = []
  for all in following_list:
    cql = "SELECT repo from testuserrepo WHERE username=%s"
    reporow = session.execute(cql, parameters=[all])
    repojson.append({"username": all, "repo": reporow[0].repo})
  jsonresponse = {"username": username, "following_details": repojson}
  return render_template("testgraphresult.html", response = jsonresponse)

@app.route("/cass/<repo>")
def cass_api(repo):
  cql = "SELECT * FROM watch WHERE reponame = %s"
  #bound_stmt = prepared_stmt.bind(str(repo))
  stmt = session.execute(cql,parameters=[repo] )
  return json.dumps(stmt)

@app.route("/allrepo")
def cass_all():
  cql = "SELECT * FROM watch"
  stmt = session.execute(cql)
  response = []
  for all in stmt:
    response.append(all)
  jsonresponse = [{"reponame":x.reponame, "watchcount":x.watchcount} for x in response[1:30]]
  return render_template("allrepo.html", repos = jsonresponse)

@app.route("/top10repo")
def top10repo():
  cql = "SELECT * FROM watch"
  stmt = session.execute(cql)
  response = []
  for all in stmt:
    response.append(all)
  jsonresponse = [{"reponame":x.reponame, "watchcount":x.watchcount} for x in response[1:10]]
  return render_template("top10repo.html", toprepos = jsonresponse)

@app.route("/holla")
def holla():
  return "Holla World!"

@app.route("/api/<month>/")
def api(month):
  return "This is data for " + month

@app.route("/api/<month>/<days>/")
def api_stats(month, days):
  data = int(days) + 10
  if data == 31:
    strng = "There are " + str(data) + " days in " + month
  else:
    strng = "Check a calendar"
  return strng

if __name__ == "__main__":
  app.run(host='0.0.0.0', debug=True)

